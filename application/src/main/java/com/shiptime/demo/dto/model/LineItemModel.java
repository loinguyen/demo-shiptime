/**
 * SANDBOX REST API
 * Welcome to the Rest API documentation. Don't have API keys? Login or create an account <a href=\"https://restapi.appspaces.ca/\">here</a> to get started.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.shiptime.demo.dto.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.math.BigDecimal;


/**
 * Represents an item in a shipment
 */
public class LineItemModel   {
  @SerializedName("length")
  private BigDecimal length = null;

  @SerializedName("width")
  private BigDecimal width = null;

  @SerializedName("height")
  private BigDecimal height = null;

  @SerializedName("weight")
  private BigDecimal weight = null;

  @SerializedName("declaredValue")
  private MoneyAmountModel declaredValue = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("nmfcCode")
  private String nmfcCode = null;

  @SerializedName("freightClass")
  private String freightClass = null;

  public LineItemModel length(BigDecimal length) {
    this.length = length;
    return this;
  }

   /**
   * Length of the package (IMPERIAL: inches/METRIC: centimetres). If a decimal number is declared, please limit the fractional part to two digits
   * @return length
  **/
  public BigDecimal getLength() {
    return length;
  }

  public void setLength(BigDecimal length) {
    this.length = length;
  }

  public LineItemModel width(BigDecimal width) {
    this.width = width;
    return this;
  }

   /**
   * Width of the package (IMPERIAL: inches/METRIC: centimetres). If a decimal number is declared, please limit the fractional part to two digits
   * @return width
  **/
  public BigDecimal getWidth() {
    return width;
  }

  public void setWidth(BigDecimal width) {
    this.width = width;
  }

  public LineItemModel height(BigDecimal height) {
    this.height = height;
    return this;
  }

   /**
   * Height of the package (IMPERIAL: inches/METRIC: centimetres). If a decimal number is declared, please limit the fractional part to two digits
   * @return height
  **/
  public BigDecimal getHeight() {
    return height;
  }

  public void setHeight(BigDecimal height) {
    this.height = height;
  }

  public LineItemModel weight(BigDecimal weight) {
    this.weight = weight;
    return this;
  }

   /**
   * Weight of the package (IMPERIAL: pounds/METRIC: kilograms). If a decimal number is declared, please limit the fractional part to three digits
   * @return weight
  **/
  public BigDecimal getWeight() {
    return weight;
  }

  public void setWeight(BigDecimal weight) {
    this.weight = weight;
  }

  public LineItemModel declaredValue(MoneyAmountModel declaredValue) {
    this.declaredValue = declaredValue;
    return this;
  }

   /**
   * Declared value of this item for insurance purposes. The amount should be in cents.
   * @return declaredValue
  **/
  public MoneyAmountModel getDeclaredValue() {
    return declaredValue;
  }

  public void setDeclaredValue(MoneyAmountModel declaredValue) {
    this.declaredValue = declaredValue;
  }

  public LineItemModel description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the item
   * @return description
  **/
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public LineItemModel nmfcCode(String nmfcCode) {
    this.nmfcCode = nmfcCode;
    return this;
  }

   /**
   * National Motor Freight Classification Code of the item, Only for PALLET Packaging type
   * @return nmfcCode
  **/
  public String getNmfcCode() {
    return nmfcCode;
  }

  public void setNmfcCode(String nmfcCode) {
    this.nmfcCode = nmfcCode;
  }

  public LineItemModel freightClass(String freightClass) {
    this.freightClass = freightClass;
    return this;
  }

   /**
   * Required only for International PALLET Packaging type.
   * @return freightClass
  **/
  public String getFreightClass() {
    return freightClass;
  }

  public void setFreightClass(String freightClass) {
    this.freightClass = freightClass;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LineItemModel lineItemModel = (LineItemModel) o;
    return Objects.equals(this.length, lineItemModel.length) &&
        Objects.equals(this.width, lineItemModel.width) &&
        Objects.equals(this.height, lineItemModel.height) &&
        Objects.equals(this.weight, lineItemModel.weight) &&
        Objects.equals(this.declaredValue, lineItemModel.declaredValue) &&
        Objects.equals(this.description, lineItemModel.description) &&
        Objects.equals(this.nmfcCode, lineItemModel.nmfcCode) &&
        Objects.equals(this.freightClass, lineItemModel.freightClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(length, width, height, weight, declaredValue, description, nmfcCode, freightClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LineItemModel {\n");
    
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    declaredValue: ").append(toIndentedString(declaredValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    nmfcCode: ").append(toIndentedString(nmfcCode)).append("\n");
    sb.append("    freightClass: ").append(toIndentedString(freightClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

