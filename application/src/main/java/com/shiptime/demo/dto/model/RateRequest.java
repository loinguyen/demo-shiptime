/**
 * SANDBOX REST API
 * Welcome to the Rest API documentation. Don't have API keys? Login or create an account <a href=\"https://restapi.appspaces.ca/\">here</a> to get started.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.shiptime.demo.dto.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;


/**
 * Rate request with shipment parameters. It, generally, should be exactly the same during rating and shipping to ensure quote and billing amounts consistency.  Please note that carrier APIs usually apply more stringent data validation when placing a shipment than during rating. For example, address field lengths have various restrictions depending on label design; phone number validity gets checked to ensure delivery, etc. These all may not be applied during rating for which sometimes only postal codes are enough.  But, to make sure the same rateRequest works well during rating and shipping, please, take care to fill out shipping details accurately and enter textual fields as short as possible especially when it comes to address details so it fits on a label. Keep in mind that label fields restrictions are different from carrier to carrier.
 */
public class RateRequest   {
  @SerializedName("from")
  private AddressModel from = null;

  @SerializedName("to")
  private AddressModel to = null;

  /**
   * Packaging type
   */
  public enum PackageTypeEnum {
    @SerializedName("PACKAGE")
    PACKAGE("PACKAGE"),
    
    @SerializedName("LETTER")
    LETTER("LETTER"),
    
    @SerializedName("PAK")
    PAK("PAK"),
    
    @SerializedName("MY_ENVELOPE")
    MY_ENVELOPE("MY_ENVELOPE"),
    
    @SerializedName("PALLET")
    PALLET("PALLET");

    private String value;

    PackageTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("packageType")
  private PackageTypeEnum packageType = null;

  @SerializedName("lineItems")
  private List<LineItemModel> lineItems = new ArrayList<LineItemModel>();

  /**
   * Units of measurements of package dimensions and weight: inches and pounds for IMPERIAL, and centimeters and kilograms for METRIC
   */
  public enum UnitOfMeasurementEnum {
    @SerializedName("IMPERIAL")
    IMPERIAL("IMPERIAL"),
    
    @SerializedName("METRIC")
    METRIC("METRIC");

    private String value;

    UnitOfMeasurementEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("unitOfMeasurement")
  private UnitOfMeasurementEnum unitOfMeasurement = null;

  /**
   * Gets or Sets serviceOptions
   */
  public enum ServiceOptionsEnum {
    @SerializedName("APPOINTMENT")
    APPOINTMENT("APPOINTMENT"),
    
    @SerializedName("SIGNATURE")
    SIGNATURE("SIGNATURE"),
    
    @SerializedName("SIGNATURE_ADULT")
    SIGNATURE_ADULT("SIGNATURE_ADULT"),
    
    @SerializedName("NO_SIGNATURE_REQUIRED")
    NO_SIGNATURE_REQUIRED("NO_SIGNATURE_REQUIRED"),
    
    @SerializedName("SPECIAL_HANDLING")
    SPECIAL_HANDLING("SPECIAL_HANDLING"),
    
    @SerializedName("SPECIAL_EQUIPMENT")
    SPECIAL_EQUIPMENT("SPECIAL_EQUIPMENT"),
    
    @SerializedName("TAILGATE_ORIGIN")
    TAILGATE_ORIGIN("TAILGATE_ORIGIN"),
    
    @SerializedName("TAILGATE_DESTINATION")
    TAILGATE_DESTINATION("TAILGATE_DESTINATION"),
    
    @SerializedName("SINGLE_SHIPMENT")
    SINGLE_SHIPMENT("SINGLE_SHIPMENT"),
    
    @SerializedName("LIMITED_ACCESS")
    LIMITED_ACCESS("LIMITED_ACCESS"),
    
    @SerializedName("MILITARY_BASE_DELIVERY")
    MILITARY_BASE_DELIVERY("MILITARY_BASE_DELIVERY"),
    
    @SerializedName("HOMELAND_SECURITY")
    HOMELAND_SECURITY("HOMELAND_SECURITY"),
    
    @SerializedName("INSIDE_DELIVERY")
    INSIDE_DELIVERY("INSIDE_DELIVERY"),
    
    @SerializedName("RTS")
    RTS("RTS"),
    
    @SerializedName("ABAN")
    ABAN("ABAN"),
    
    @SerializedName("SATURDAY_DELIVERY")
    SATURDAY_DELIVERY("SATURDAY_DELIVERY");

    private String value;

    ServiceOptionsEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("serviceOptions")
  private List<ServiceOptionsEnum> serviceOptions = new ArrayList<ServiceOptionsEnum>();

  @SerializedName("shipDate")
  private String shipDate = null;

  /**
   * Insurance type, defaults to CARRIER if not specified
   */
  public enum InsuranceTypeEnum {
    @SerializedName("SHIPTIME")
    SHIPTIME("SHIPTIME"),
    
    @SerializedName("CARRIER")
    CARRIER("CARRIER");

    private String value;

    InsuranceTypeEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("insuranceType")
  private InsuranceTypeEnum insuranceType = null;

  @SerializedName("customsInvoice")
  private CustomsInvoiceModel customsInvoice = null;

  public RateRequest from(AddressModel from) {
    this.from = from;
    return this;
  }

   /**
   * Origin address
   * @return from
  **/
  public AddressModel getFrom() {
    return from;
  }

  public void setFrom(AddressModel from) {
    this.from = from;
  }

  public RateRequest to(AddressModel to) {
    this.to = to;
    return this;
  }

   /**
   * Destination address
   * @return to
  **/
  public AddressModel getTo() {
    return to;
  }

  public void setTo(AddressModel to) {
    this.to = to;
  }

  public RateRequest packageType(PackageTypeEnum packageType) {
    this.packageType = packageType;
    return this;
  }

   /**
   * Packaging type
   * @return packageType
  **/
  public PackageTypeEnum getPackageType() {
    return packageType;
  }

  public void setPackageType(PackageTypeEnum packageType) {
    this.packageType = packageType;
  }

  public RateRequest lineItems(List<LineItemModel> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public RateRequest addLineItemsItem(LineItemModel lineItemsItem) {
    this.lineItems.add(lineItemsItem);
    return this;
  }

   /**
   * Collection of shipment items
   * @return lineItems
  **/
  public List<LineItemModel> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItemModel> lineItems) {
    this.lineItems = lineItems;
  }

  public RateRequest unitOfMeasurement(UnitOfMeasurementEnum unitOfMeasurement) {
    this.unitOfMeasurement = unitOfMeasurement;
    return this;
  }

   /**
   * Units of measurements of package dimensions and weight: inches and pounds for IMPERIAL, and centimeters and kilograms for METRIC
   * @return unitOfMeasurement
  **/
  public UnitOfMeasurementEnum getUnitOfMeasurement() {
    return unitOfMeasurement;
  }

  public void setUnitOfMeasurement(UnitOfMeasurementEnum unitOfMeasurement) {
    this.unitOfMeasurement = unitOfMeasurement;
  }

  public RateRequest serviceOptions(List<ServiceOptionsEnum> serviceOptions) {
    this.serviceOptions = serviceOptions;
    return this;
  }

  public RateRequest addServiceOptionsItem(ServiceOptionsEnum serviceOptionsItem) {
    this.serviceOptions.add(serviceOptionsItem);
    return this;
  }

   /**
   * Service options
   * @return serviceOptions
  **/
  public List<ServiceOptionsEnum> getServiceOptions() {
    return serviceOptions;
  }

  public void setServiceOptions(List<ServiceOptionsEnum> serviceOptions) {
    this.serviceOptions = serviceOptions;
  }

  public RateRequest shipDate(String shipDate) {
    this.shipDate = shipDate;
    return this;
  }

   /**
   * Shipment date (Format: yyyy-MM-dd)
   * @return shipDate
  **/
  public String getShipDate() {
    return shipDate;
  }

  public void setShipDate(String shipDate) {
    this.shipDate = shipDate;
  }

  public RateRequest insuranceType(InsuranceTypeEnum insuranceType) {
    this.insuranceType = insuranceType;
    return this;
  }

   /**
   * Insurance type, defaults to CARRIER if not specified
   * @return insuranceType
  **/
  public InsuranceTypeEnum getInsuranceType() {
    return insuranceType;
  }

  public void setInsuranceType(InsuranceTypeEnum insuranceType) {
    this.insuranceType = insuranceType;
  }

  public RateRequest customsInvoice(CustomsInvoiceModel customsInvoice) {
    this.customsInvoice = customsInvoice;
    return this;
  }

   /**
   * Customs invoice, required for international shipments
   * @return customsInvoice
  **/
  public CustomsInvoiceModel getCustomsInvoice() {
    return customsInvoice;
  }

  public void setCustomsInvoice(CustomsInvoiceModel customsInvoice) {
    this.customsInvoice = customsInvoice;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateRequest rateRequest = (RateRequest) o;
    return Objects.equals(this.from, rateRequest.from) &&
        Objects.equals(this.to, rateRequest.to) &&
        Objects.equals(this.packageType, rateRequest.packageType) &&
        Objects.equals(this.lineItems, rateRequest.lineItems) &&
        Objects.equals(this.unitOfMeasurement, rateRequest.unitOfMeasurement) &&
        Objects.equals(this.serviceOptions, rateRequest.serviceOptions) &&
        Objects.equals(this.shipDate, rateRequest.shipDate) &&
        Objects.equals(this.insuranceType, rateRequest.insuranceType) &&
        Objects.equals(this.customsInvoice, rateRequest.customsInvoice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, packageType, lineItems, unitOfMeasurement, serviceOptions, shipDate, insuranceType, customsInvoice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateRequest {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    unitOfMeasurement: ").append(toIndentedString(unitOfMeasurement)).append("\n");
    sb.append("    serviceOptions: ").append(toIndentedString(serviceOptions)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    insuranceType: ").append(toIndentedString(insuranceType)).append("\n");
    sb.append("    customsInvoice: ").append(toIndentedString(customsInvoice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

